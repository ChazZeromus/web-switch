TODO:
Maybe enforce a nice logging rule for printable objects:
    __repr__: Full representation, should be printed at most one time as early as possible, preferably when
              the object is created so all attributes are known.
    __str__:  Simplified and easy to read, with not too little but enough to quickly identify the source of an
              event

              class SomeBigClass(object):
                def __init__(self, name):
                  self.id = id(self)
                  self.name = name
                  self.a = 10
                  self.b = 20

                  logger.info(f'Created {self!r}')

                def __repr__(self):
                  return f'SomeBigClass(id={self.id}, name={self.name}, a={self.a}, b={self.b})'

                def __str__(self):
                  return f'SomeBigClass(id={self.id}, name={self.name})'

Module level logging is bad because they're hard to manage and synchronize, instead keep them in classes or functions


Also write tests!

Make add_dispatch by default parse method name to auto-capture action name

Supply a None to params in add_dispatch to capture all parameters and require a VAR_KEYWORD argument.

Maybe implement a way for clients to cancel ongoing conversations, like a special cancel message or something.

Should client be able to provide their own message ID? This might be useful because not providing a
message ID from client as of now makes it confusing to determine which first-response to client
is meant for whom. This dynamic is fine as long as independent actions that are not awaiting are
synchronous. But once it might be a bad idea since we can allow actions to arrive in any order.
A client providing an ID can make it easier to determine which error belongs to which conversation
if the error occurs before a response_id is generated. The issue with this is that the client can
generate an arbitrary amount of active conversations. Actually synchronous actions would have response IDs
that expire the instant a response is generated, and async actions are source-exclusive by default.

When we put back 'provide_await', we can allow dispatch users to define async
actions that do not wish to use await_dispatch. For now this can be less complicated.
Actually:
    Also when we cancel in-flight actions that are exclusive, we do this by cancelling the future that
    the action coroutine awaits on that is stored in AwaitDispatch. This generates an exception at the site
    of the `await`. But what happens when we cancel an exclusive_async in the future that does not have
    an AwaitDispatch to await on? We'd have to store the future of the coroutine itself and cancel it. But
    that would present itself with a bad programming pattern that tells the user if you don't want to do an
    AwaitDispatch and that's fine, but you'll have no opportunity to wrap an await in a try-except to do
    cleanup. So in all, async actions with no opt-in for AwaitDispatch-ing will have the action coroutine cancelled
    with no oppurtunity to do clean up.


I want to be able to provide anyone who uses the Router class to be able to wrap AwaitDispatch objects for their actions
and provide extra methods like sending messages over websocket to a particular ID or something. Right now if an action's
method is async, it is *required* to have an await_dispatch parameter. This is problematic since wrapping an AwaitDispatch
and replacing it in the ResponseDispatcher's argument hook will alter the type of parameter and will cause the add_action
decorator to incorrectly assert that an object of type AwaitDispatch is passed but in actuality the Router subclass
will provide a wrapper of a different type.

    Normal Router:

        class Foo(Router):
            ...
            @add_action()
            async def bar_action(await_dispatch: AwaitDispatch):
                # await_dispatch is guaranteed to be of type AwaitDispatch
                do_stuff()
                await await_dispatch()

    Router with wrapped AwaitDispatch
        class FooDispatch(AbstractAwaitDispatch):
            def __init__(self, original: AwaitDispatch):
                self.original = original

            def get_await_dispatch(self):
                return self.original

            async def do_something_foo(self):
                ....

        class Foo(Router):
            ...
            def argument_hook(self, args: Dict, source: object, action: Action) -> Dict:
                await_dispatch = args.get('await_dispatch')

                # Intercept and wrap await_dispatch in our own dispatch
                if await_dispatch:
                    copy = args.copy()
                    copy.update(await_dispatch=FooDispatch(await_dispatch))

                    return copy

            @add_action()
            async def bar_action(await_dispatch: AwaitDispatch):
                # await_dispatch is actually FooDispatch
                do_stuff()
                await await_dispatch.do_something_foo()

    So the problem is when writing actions in an IDE or using a python static type analyzer, the action will fail to
    verify at runtime (if such mechanism is in place) as bar_action will receive a FooDispatch at runtime and not
    an AwaitDispatch. Ideally we'd want to be able to have access to an await_dispatch
    in our hook but also not be obligated to provide it as a parameter in our actions so that their signatures are
    not cluttered. This is the ideal solution:
        class FooDispatch(AbstractAwaitDispatch):
            def __init__(self, original: AwaitDispatch):
                self.original = original

            def get_await_dispatch(self):
                return self.original

            async def do_something_foo(self):
                ....

        class Foo(Router):
            ...
            def argument_hook(self, args: Dict, source: object, action: Action) -> Dict:
                await_dispatch = args.get('await_dispatch')

                # Intercept and wrap await_dispatch in our own dispatch
                if await_dispatch:
                    copy = args.copy()
                    copy.update(await_dispatch=FooDispatch(await_dispatch))

                    return copy

            @add_action()
            async def bar_action(foo: FooDispatch):
                do_stuff()
                # Nice and apparent
                await foo.do_something_foo()

        Here bar_action does not care about AwaitDispatch and only cares about the wrapper that the Foo router provides.

        Obviously the required change here is to no longer require async methods to define an await_dispatch. However I
        find this breaks the design pattern of explicitness. The user that is subclassing the Router class will have
        to *know* about the *now implicit* await_dispatch in documentation rather than being yelled at at runtime when
        the decorator fails to assert that await_dispatch was not defined in an async action's method signature.

When defining common parameters for actions when creating a ResponseDispatcher, we may have a different set of common
parameters for async functions, so provide that as an extra argument in the ResponseDispatcher constructor.

Also remember when we had parameter verification that would use an already created ResponseDispatcher, but we now removed
the requirement to make a static field to access the add_action decorator as an action? We have no parameter verification
on decoration because there is no ResponseDispatcher object when the decorators are run during class definition. So
let's add additional verification when the ResponseDispatcher object is created.

Also we should distinguished between common parameters that are shared simply because they are common across different
actions and shared because they are inherent to the Router subclass and are provided without explicit dispatch arguments.
If we do not distinguish then explicit dispatch arguments can provide these inherent parameters and may cause security
issues. (Like providing an auth token as a common param that is internal to the Router sub-class)


When we dispatch the async methods we should really store those futures so ResponseDispatcher.stop() can cancel them
or set_exception them
    Done, stored in self._active_dispatches

Also we got tons of asyncio exception that happen even when tests succeed

There seems ot be two event loops that are calling each other during test_convo test. test_convo's Router has its own
event thread that is used by its own EventLoopThread object for reading from websockets, and ResponseDispatcher
has its own EventLoopThread and uses its own thread when dispatch async actions, which is very problematic since
the definition of these actions will be using methods like send() that are async but use Router's event loop and not
one loop:/
    Seems like you could do is not explicitly specify the event loops when calling these functions. By omitting the event
    loop, the current event is used, which is whatever is running the current coroutine. This way the Router class can have
    async methods that can be run from event loops external to the Router's private event loop.
        Done

In our tests, if the client's last action is to send a server-consumed message, then the client will destruct
and will likely cause a possible early destruction of the server in client_test.py without processing all messages as
the fixture client_with_server dictates that the yielded client destructs and so should the parent nested fixture immediately
after. This causes issues as the server may not be finished and is ended prematurely. Since packets can arrive in an arbitrary
amount of time, we could some how await the server destruction until it processed the last message? The only way to reliably
await server destruction is if we keep track of client messages sent to server make sure all of them are processed in
the server before destruction. But this seems a bit hacky as the server knows exactly what messages to receive.
    Done, Added a simple 5 second timeout for now that cancels AwaitDispatches and Actions on timeout.

Allow intrinsic parameters to be optionally specified? Will probably have to modify verify_exposed and verify_full methods
to allow them to be optional.

Make Channel and Room classes. Handling any possible permissions and behaviors.
    This seems like it might not be needed, it would make more sense to wrap these
    into a 'class-package' if there were a lot of channel and room specific behaviors
    that need to be templated.

When a client sends a message to another client, there isn't a way to receive the message as another message without
being in an a conversation. We could allow blank response IDs but that could cause issues where the payload could be
pushed up the queue and never retrieved. Though this problem is natural to responses that do have response IDs, an ideal
solution to this problem regardless of guid would be to have a queue for each conversation that all comes from one additional
queue that does not belong to any particular conversation.

X Queue                  123 Queue      567 Queue

[msg: foo, guid: None]
[msg: dff, guid: 123]---->[ ]
[msg: bar, guid: 123]---->[ ]
[msg: bah, guid: 567]------------------> [ ]
